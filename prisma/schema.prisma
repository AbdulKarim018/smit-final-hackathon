// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String
  image        String?
  role         UserRole
  departmentId String?

  emailVerified Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  Department Department? @relation(fields: [departmentId], references: [id])
  Log        Log[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum UserRole {
  RECEPTIONIST
  DEPARTMENT_STAFF
  ADMIN
}

model Beneficiary {
  id               String @id @default(cuid())
  name             String
  address          String
  phone            String
  email            String
  cnic             String @unique
  cnicFrontPicture String
  cnicBackPicture  String

  visits Visit[]
}

model Visit {
  id            String      @id @default(cuid())
  token         String      @unique
  purpose       String
  status        VisitStatus @default(PENDING)
  remarks       String?
  beneficiaryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
}

enum VisitStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Department {
  id    String @id @default(cuid())
  name  String
  code  String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Log {
  id      String @id @default(cuid())
  visitId String
  userId  String
  message String

  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])

  @@map("log")
}
